---
title: "Descarga de variables climaticas desde Google Earth Engine"
editor_options: 
  chunk_output_type: console
---

```{r, echo=FALSE, warning=F, message=FALSE}
#install.packages('geojsonio')
library(tidyverse)
library(ggplot2)
library(sf)
library(lubridate)
library(tmap)
library(rgee)
```

# Preprocesamiento

```{r}
df <- readxl::read_xlsx('datos/Datos.a.usar.xlsx')
df$Lat <- df$Lat *-1 ## multiplicamos por -1
df$Long <- df$Long *-1
```

## Trabajamos con las variables temporales

Convertimos la columna con las fechas del periodo crítico y le restamos 30 días para ampliar la ventana de descarga de las variables climáticas

```{r}
df$fechacorta <- as.Date(df$fechacorta) - days(30)
```

## Trabajamos con las variables espaciales

Convertimos el `dataframe` a un objeto espacial cuya estructura es similar al `dataframe` pero con una columna que hace referencia a las coordenadas espaciales.

```{r}
## vamos a utlizar la libreria sf
df_sf <- st_as_sf(df,
                  coords = c('Long','Lat'),
                  crs=4326)

```

Chequeamos que los puntos pertenecen a los lugares que deberían

```{r message=FALSE}
tmap_mode('view')
tm_shape(df_sf) +
  tm_dots()
```

Generamos un polígono para delimitar el área de descarga de los datos

```{r}
poligono <-  st_convex_hull(st_buffer(st_combine(df_sf),
                                      units::as_units(40000,'m')))
tm_shape(poligono) +
  tm_polygons(alpha = 0)  +
  tm_shape(df_sf) +
  tm_dots()
```

Inicializamos GEE, transformamos el polígono sf a un objeto earth engine y estamos listos para comenzar la descarga!

```{r,eval=FALSE}
ee_Initialize()
poligono_ee <- sf_as_ee(poligono)
```

# Descarga de los datos climaticos desde ERA5 Land a traves de GEE

Ejemplo con un solo dato

```{r}
point_to_extract <- df_sf[1,]
startDate <-point_to_extract$fechacorta
endDate <- point_to_extract$fechacorta + days(1)

eras_re <-   ee$ImageCollection("ECMWF/ERA5_LAND/DAILY_RAW")$
    filter(ee$Filter$date(startDate,endDate))$
    select('total_precipitation', 
           'temperature_2m',
           'dewpoint_temperature_2m',
           'u_component_of_wind_10m',
           'v_component_of_wind_10m',
           'total_evaporation')$
    filterBounds(poligono_ee)$
    reduce(ee$Reducer$sum())
```

```{r}

data_point_extracted <-
    ee_extract(x = eras_re, y = point_to_extract, sf = TRUE, scale = 1000)


colnames(data_point_extracted) <-
  gsub('X[0-9]{6}_',
       '',
       colnames(data_point_extracted),
       fixed = FALSE,
       perl = TRUE)
```

```{r}
data_point_extracted
```

## Sistematización de la descarga

Llamamos las funciones de descarga

```{r}
source('src/cambio_de_unidades2.R') ## función que nos permite pasar de kelvins a Celsius
source('src/XClimVar2.R') # Contiene la función de descarga 
```

La función de descarga necesita :

-   `dataframe` con la columna geom, es decir haber transformado un `dataframe` a un objeto `sf`.

-   la columna tiempo contiene las fechas, estas pueden estar en `string`, no necesariamente en tipo `Date`.

-   pol, es el polígono generado con los puntos de muestreo. `poligono_ee`.

-   climaticvar recibe como entrada un vector con las variables a descargar, estas pueden ser :

c('pp_sum','pp_mean','t_mean','t_sum','te_mean','te_sum','dp','wind','hr') mientras mayor sea el número de variables mas tiempo tomará la extracción

Estas tres variables reciben como entrada un valor lógico (`TRUE` o `FALSE`), esto indica como extraer los valores, si en días, meses o años.

-   Daily(boolean)

-   Monthly(boolean)

-   Yearly(boolean)

El periodo de descarga es determinado por:

-   p_length: es el largo del periodo total para la descarga de variables (numérica)

-   step: es cada cuanto se toman las variables (numérica)

### 

```{r, eval=FALSE}
df_climatic <- XClimVar(df_sf,
                        df_sf$fechacorta,
                        pol = poligono_ee,
                        climaticvar = c( 'pp_sum','t_mean','te_sum','dp','wind','hr'),
                        Daily = T,
                        p_length=90,
                        step=10)
head(df_climatic)

df_climatic <- cbind(st_coordinates(df_climatic),
                     st_drop_geometry(df_climatic))

write.csv(df_climatic, "datos/datos_climaticos_p90_s10_GRSV.csv",
          row.names = F,
          sep = ',')
```
