library(sf)
datos <- st_read('datos/datos_semanales.gpkg')
datos
datos <- dplyr::select(-c('Anio', 'Provincia','Localidad', 'lote', 'porc_infección','ID',
'Zona', 'Columna1', 'fechacorta', 'NDVI_mean','fecha'))
datos <- dplyr::select(c('Anio', 'Provincia','Localidad', 'lote', 'porc_infección','ID',
'Zona', 'Columna1', 'fechacorta', 'NDVI_mean','fecha'))
datos <- dplyr::select(-c(Anio, Provincia,Localidad, lote, porc_infección,ID,
Zona, Columna1, fechacorta, NDVI_mean,fecha))
datos <- dplyr::select(contains(c(Prevalencia,Humedad.relativa,Temperatura,
Viento,Precipitacion)))
library(dplyr)
datos <- dplyr::select(contains(c(Prevalencia,Humedad.relativa,Temperatura,
Viento,Precipitacion)))
datos <- dplyr::select(contains(c('Prevalencia','Humedad.relativa','Temperatura',
'Viento','Precipitacion')))
datos <- select(contains(c('Prevalencia','Humedad.relativa','Temperatura',
'Viento','Precipitacion')))
datos <- select(contains('Prevalencia','Humedad.relativa','Temperatura',
'Viento','Precipitacion'))
names(datos)
datos <- datos[,c(7,13:)]
datos <- datos[,c(7,13:40)]
datos
datos <- st_drop_geometry(datos)
datos
View(datos)
View(datos)
datos
datos
write.table(datos, file = "datos/datos_con_variables.txt",
quote = F, sep = "\t",
row.names = F,
col.names = TRUE)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos
head(datos)
datos
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 2,# Establece el nivel de siguimiento.
maxRuns = 300)
#install.packages("Boruta")
library(Boruta)
set.seed(123)
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 2,# Establece el nivel de siguimiento.
maxRuns = 300)
seleccion
datos
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 2,# Establece el nivel de siguimiento.
maxRuns = 100)
seleccion
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 2,# Establece el nivel de siguimiento.
maxRuns = 400)
seleccion
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 0,# Establece el nivel de siguimiento.
maxRuns = 400)
seleccion$timeTaken
#install.packages("Boruta")
library(Boruta)
# Establecemos una semilla de aleatoriedad para garantizar la reproducibilidad
# de este script.
set.seed(123)
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 0,# Establece el nivel de siguimiento.
maxRuns = 400)
seleccion
plot(seleccion)
plot(seleccion)
plot(seleccion)
plot(seleccion,cex.axis=.7,las=2, xlab="")
plot(seleccion,cex.axis=.5,las=2, xlab="")
seleccion$ImpHistory
seleccion$finalDecision
seleccion$impSource
seleccion$ImpHistory
seleccion$impSource
attStats(seleccion)
importancias <- attStats(seleccion)
importancias
importancias <- as.data.frame(attStats(seleccion)) |>
order(meanImp)
importancias <- as.data.frame(attStats(seleccion)) |>
order(x.meanImp)
importancias <- as.data.frame(attStats(seleccion))
#Ordenamos de mayor a menor segun la importancia media
importancias <- importancias[with(importancias,
order(-importancias$meanImp))]
importancias
importancias <- importancias[with(importancias,
order(-importancias$meanImp))]
nivel_importancia <- as.data.frame(attStats(seleccion))
nivel_importancia <- as.data.frame(attStats(seleccion))
#Ordenamos de mayor a menor segun la importancia media
importancia <- nivel_importancia[with(nivel_importancia,
order(-nivel_importancia$meanImp))]
#Ordenamos de mayor a menor segun la importancia media
importancia <- nivel_importancia[with(nivel_importancia,
order(-nivel_importancia$meanImp))]
#Ordenamos de mayor a menor segun la importancia media
importancia <- nivel_importancia[with(nivel_importancia,
order(-nivel_importancia$meanImp)),]
importancia
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
knitr::kable(head(datos))
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
knitr::kable(head(datos))
#install.packages("Boruta")
library(Boruta)
# Establecemos una semilla de aleatoriedad para garantizar la reproducibilidad
# de este script.
set.seed(123)
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 0,# Establece el nivel de siguimiento.
maxRuns = 400)
cat(seleccion)
variables_selec
seleccion$finalDecision[seleccion$finalDecision %in%
"Confirmed"]
names(seleccion$finalDecision[seleccion$finalDecision %in%
"Confirmed"])
variables_selec <- names(seleccion$finalDecision[seleccion$finalDecision %in%
"Confirmed"])
paste(variables_selec, sep = ',')
variables_selec <- names(seleccion$finalDecision[seleccion$finalDecision %in%
"Confirmed"])
cat(variables_selec)
cat(variables_selec, sep = ',')
variables_selec <- names(seleccion$finalDecision[seleccion$finalDecision %in%
"Confirmed"])
cat(variables_selec, sep = ',')
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
entrenar
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
variables_selec
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- as.factor(datos$Prevalencia)
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
datos$Prevalencia <- as.factor(datos$Prevalencia)
datos$Prevalencia
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
datos$Prevalencia
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
library(caret)
library(MLmetrics)
# install.packages('caret')
install.packages('MLmetrics')
# install.packages('caret')
# install.packages('MLmetrics')
library(caret)
library(MLmetrics)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
rf
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
summaryFunction = twoClassSummary,
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
rf
mean(rf$resample$AUC)
rf$resample
rf$resample
rf$resample
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf$resample$ROC
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = c("Accuracy","ROC"),
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = c("Accuracy","ROC"),
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
summaryFunction = multiClassSummary,
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf$resample$AUC
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "% \n")
rf$resample
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "% \n")
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "\n")
cat("El índice Kappa medio de este modelo fue:", mean(modelo_J48$resample$Kappa), "\n")
rf$resample$Kappa
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "\n")
cat("El índice Kappa medio de este modelo fue:", mean(rf$resample$Kappa), "\n")
