datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
variables_selec
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- as.factor(datos$Prevalencia)
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
datos$Prevalencia <- as.factor(datos$Prevalencia)
datos$Prevalencia
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
library(caret)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
datos$Prevalencia
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
summaryFunction = multiClassSummary,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",     # Maximize = TRUE by default
trControl = control_entrenamiento,
tuneLength = 10)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
library(caret)
library(MLmetrics)
# install.packages('caret')
install.packages('MLmetrics')
# install.packages('caret')
# install.packages('MLmetrics')
library(caret)
library(MLmetrics)
datos <- read.table("datos/datos_con_variables.txt",
sep = '\t',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
cat("El set de entrenamiento tiene", nrow(set_entrenamiento), "observaciones y
el set de testeo tiene", nrow(set_test), "observaciones.")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
rf
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
summaryFunction = twoClassSummary,
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
rf
mean(rf$resample$AUC)
rf$resample
rf$resample
rf$resample
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
rf$resample$ROC
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = c("Accuracy","ROC"),
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = c("Accuracy","ROC"),
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "ROC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
summaryFunction = multiClassSummary,
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
rf$resample$AUC
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$ROC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "% \n")
rf$resample
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "% \n")
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "\n")
cat("El índice Kappa medio de este modelo fue:", mean(modelo_J48$resample$Kappa), "\n")
rf$resample$Kappa
set.seed(123)
rf <- train(Prevalencia ~ Viento__mean + Viento__mean.1 + Viento__mean.3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
trControl = control_entrenamiento)
cat("El área media bajo la curva ROC de este modelo fue:", mean(rf$resample$AUC), "\n")
cat("La precisión media de este modelo fue:", mean(rf$resample$Accuracy), "\n")
cat("El índice Kappa medio de este modelo fue:", mean(rf$resample$Kappa), "\n")
install.packages('sf')
install.packages('reticulate')
library('reticulate')
remotes::install_github('r-spatial/rgee')
#remotes::install_github('r-spatial/rgee')
library(rgee)
py_discover_config()
import('sys')$executable
ee_install()
library('reticulate')
#remotes::install_github('r-spatial/rgee')
library(rgee)
reticulate::use_python('C:\Users\franm\.conda\envs\rgee/python.exe', required = TRUE)
reticulate::use_python('C:/Users/franm/.conda/envs/rgee/python.exe', required = TRUE)
reticulate::py_config()
library(rgee)
ee_Initialize()
ee_Authenticate()
4/1AfJohXl5makNpv2lvqiF6y8YJjl85RFFzMjb1WtMdhMT01r4N-tibFBcEKs
ee_Initialize()
ee$String('Autenticado correctametne desde EE')$getInfo()
library(tidyverse)
library(ggplot2)
library(sf)
library(lubridate)
library(tmap)
library(rgee)
# Chunk 1
library(tidyverse)
library(ggplot2)
library(sf)
library(lubridate)
library(tmap)
library(rgee)
# Chunk 2
df <- readxl::read_xlsx('datos/Datos.a.usar.xlsx')
df$Lat <- df$Lat *-1 ## multiplicamos por -1
df$Long <- df$Long *-1
# Chunk 3
sum(is.na(df)) ## sin relevancia nombre:columna 1
# Chunk 4
sum(is.na(df$Columna1))
# Chunk 5
df$fechacorta <- as.Date(df$fechacorta) - days(30)
# Chunk 6
## vamos a utlizar la libreria sf
df_sf <- st_as_sf(df,
coords = c('Long','Lat'),
crs=4326)
# Chunk 7
tmap_mode('view')
tm_shape(df_sf) +
tm_dots()
# Chunk 8
poligono <-  st_convex_hull(st_buffer(st_combine(df_sf),
units::as_units(4000,'m')))
plot(poligono)
# Chunk 9
ee_Initialize()
poligono_ee <- sf_as_ee(poligono)
# Chunk 10
source('src/cambio_de_unidades2.R') ## funcion que nos permite pasar de kelvins a Celsius
source('src/XClimVar2.R') # Contie la fucion de descarga
df_climatic <- XClimVar(df_sf,
df_sf$fechacorta,
pol = poligono_ee,
climaticvar = c( 'pp_sum','t_mean','te_sum','dp','wind','hr'),
Daily = T,
p_length=90,
step=10)
head(df_climatic)
#ee_Initialize()
poligono_ee <- sf_as_ee(poligono)
install.packages("geojsonio")
#ee_Initialize()
poligono_ee <- sf_as_ee(poligono)
df_climatic <- XClimVar(df_sf,
df_sf$fechacorta,
pol = poligono_ee,
climaticvar = c( 'pp_sum','t_mean','te_sum','dp','wind','hr'),
Daily = T,
p_length=90,
step=10)
head(df_climatic)
library(tidyverse)
library(ggplot2)
library(sf)
library(lubridate)
library(tmap)
library(rgee)
install.packages("terra")
#install.packages('geojsonio')
library(tidyverse)
library(ggplot2)
library(sf)
library(lubridate)
library(tmap)
library(rgee)
library(terra)
library(tmap)
tmap_mode('view')
tm_shape(df_sf) +
tm_dots()
library(tmap)
install.packages("terra")
library(tmap)
library(tmap)
install.packages("terra")
remotes::install_github("rspatial/terra")
library(tmap)
library(tmap)
install.packages("tmap")
library(tmap)
install.packages("terra")
library(tmap)
library(rgee)
poligono <-  st_convex_hull(st_buffer(st_combine(df_sf),
units::as_units(4000,'m')))
tm_shape(poligono) +
tm_polygons(alpha = 0)  +
tm_shape(df_sf) +
tm_dots()
tmap_mode('view')
tm_shape(df_sf) +
tm_dots()
poligono <-  st_convex_hull(st_buffer(st_combine(df_sf),
units::as_units(4000,'m')))
tm_shape(poligono) +
tm_polygons(alpha = 0)  +
tm_shape(df_sf) +
tm_dots()
variables_selec
# Chunk 1
datos <- read.table("datos/datos_climaticos_p90_s10_GRSV_.csv",
sep = ',',
header = T)
knitr::kable(head(datos))
# Chunk 2
#install.packages("Boruta")
library(Boruta)
# Establecemos una semilla de aleatoriedad para garantizar la reproducibilidad
# de este script.
set.seed(123)
# Ahora empezamos la selección
seleccion <- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta,
data = datos,
doTrace = 0,# Establece el nivel de siguimiento.
maxRuns = 300)
seleccion
# Chunk 3
plot(seleccion,cex.axis=.5,las=2, xlab="")
# Chunk 4
nivel_importancia <- as.data.frame(attStats(seleccion))
#Ordenamos de mayor a menor segun la importancia media
importancia <- nivel_importancia[with(nivel_importancia,
order(-nivel_importancia$meanImp)),]
knitr::kable(importancia)
# install.packages('caret')
# install.packages('MLmetrics')
library(caret)
library(MLmetrics)
datos <- read.table("datos/datos_climaticos_p90_s10_GRSV_.csv",
sep = ',',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
# Chunk 1
# install.packages('caret')
# install.packages('MLmetrics')
library(caret)
library(MLmetrics)
datos <- read.table("datos/datos_climaticos_p90_s10_GRSV_.csv",
sep = ',',
header = T)
datos$Prevalencia <- factor(datos$Prevalencia,
labels = c('N','P'))
set.seed(123)
entrenar <- createDataPartition(datos$Prevalencia,
p = 0.8,
list = F)
set_entrenamiento <- datos[entrenar,]
set_test <- datos[-entrenar,]
# Chunk 2
proporciones <- data.frame("Set" = c("Entrenamiento","Validacion"),
"Positivos" = c(sum(set_entrenamiento$Prevalencia == "P")/nrow(set_entrenamiento),
sum(set_test$Prevalencia == "P")/nrow(set_test)),
"Negativos" = c(sum(set_entrenamiento$Prevalencia == "N")/nrow(set_entrenamiento),
sum(set_test$Prevalencia == "N")/nrow(set_test)))
knitr::kable(proporciones)
# Chunk 3
control_entrenamiento <- trainControl(method = "repeatedcv",
number=5,
repeats = 3,
returnResamp = "final",
summaryFunction = multiClassSummary,
allowParallel = TRUE,
classProbs = TRUE,
p = .8)
# Chunk 4
set.seed(123)
rfgrid <- expand.grid(mtry = 2)
rf <- train(Prevalencia ~Viento_M3+Punto.rocio_M3+Precipitacion_S3,
data=set_entrenamiento,
method="rf",
metric = "AUC",
tuneGrid = rfgrid,
trControl = control_entrenamiento)
# Chunk 5
Testeo <- MLmetrics::Accuracy(predict(rf,set_test),set_test$Prevalencia)
SensRF <- MLmetrics::Sensitivity(set_test$Prevalencia,predict(rf,set_test), positive = "P")
EspRF <- MLmetrics::Specificity(set_test$Prevalencia,predict(rf,set_test), positive = "P")
AUCRF <- pROC::auc(as.numeric(set_test$Prevalencia),as.numeric(predict(rf,set_test)))
set.seed(123)
rlg <- train(Prevalencia ~Viento_M3+Punto.rocio_M3+Precipitacion_S3,
data=set_entrenamiento,
method="glm",
family = "binomial",
metric = "AUC",
trControl = control_entrenamiento)
rlg
summary(rlg)
car::vif(rlg$finalModel)
car::vif(rlg$finalModel)
summary(rlg)
set.seed(123)
rlg <- train(Prevalencia ~Viento_M3+Punto.rocio_M3+Precipitacion_S3,
data=set_entrenamiento,
method="glm",
family = "binomial",
metric = "AUC",
trControl = control_entrenamiento)
summary(rlg)
car::vif(rlg$finalModel)
summary(rlg)
library(reticulate)
#remotes::install_github('r-spatial/rgee')
library(rgee)
py_discover_config()
import('sys')$executable
ee_install()
