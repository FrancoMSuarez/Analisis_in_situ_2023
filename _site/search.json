[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Modelos estadísticos basados en aprendizaje automático para predecir enfermedades en cultivos agrícolas usando variables climáticas de productos satelitales",
    "section": "",
    "text": "Introducción\nEn la era de la información, el acceso a datos satelitales de alta resolución espacial y temporal ha revolucionado la forma en que comprendemos y gestionamos nuestro entorno. La constante evolución de la tecnología espacial ha permitido que una gran cantidad de información sea capturada desde el espacio, ofreciendo una perspectiva sin precedentes de nuestro planeta. La disponibilidad de datos satelitales de alta calidad se ha convertido en una herramienta fundamental para una amplia gama de aplicaciones, desde la monitorización ambiental y la gestión de desastres hasta la planificación urbana y la agricultura de precisión.\nAdemás, la capacidad de cómputo disponible en la actualidad ha abierto nuevas posibilidades en el análisis de datos satelitales. Esta alta capacidad de computo nos permite procesar grandes volúmenes de información, podemos obtener información más detallada y actualizada. Esto ha impulsado avances significativos en la predicción de fenómenos naturales, la gestión y planificación de recursos naturales.\nA lo largo de este análisis, exploraremos en detalle el acceso y la descarga de datos climáticos disponibles en la plataforma Google Earth Engine mediante su conexión con R. Abordaremos además algunas técnicas de selección de variables y el posterior ajuste de modelos predictivos.\n\n\nContenidos\n1.Tutorial para instalar el paquete rgee.\n2. Descarga de variables climáticas.\n3. Métodos de selección de variables.\n4. Ajuste de Modelos Predictivos."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "instalacion.html",
    "href": "instalacion.html",
    "title": "Instrucciones para instalar rgee",
    "section": "",
    "text": "Previamente a instalar rgee:\n\nTener instalado Python con la libreria GEE.\n\n\nTener creada una cuenta en Google Earth Engine.\n\nAbrir Rstudio e instalar los paquetes necesarios\n\ninstall.packages('sf')\ninstall.packages('reticulate')\ninstall.packages('remotes')\n\nInstalar rgee utilizando el paqute reomotes\n\nlibrary(reticulate)\n#remotes::install_github('r-spatial/rgee')\nlibrary(rgee)\n\nUtilizar la función py_dicover_config() para ver la versión de python que utiliza\n\npy_discover_config()\n\nVerificar la dirección de Python\n\nimport('sys')$executable\n\nLa siguiente función crea un ambiente aislado de Python con todas las dependencias. Aquí le pedirá aceptar el ambiente a crear y la dará su dirección que debe copiar\n\nee_install()\n\nAqui, luego de unos minutos , pedirá aceptar los cambios, para esto escribimos Y en la consola y presionamos la tecla Enter. Luego de que se haya instalado sugerimos reiniciar la computadora.\nUna vez reiniciada establecemos el directorio al ambiente de rgee en la computadora\n\nreticulate::use_python('C:/Users/.../python.exe', required = TRUE)\nreticulate::py_config()\n\nCargar el paquete rgee\n\nlibrary(rgee)\n\nInicializar google earth engine, cuando iniciamos por primera vez R pedirá abrir una ventana del navegador para que autentifiquemos con nuestras credenciales. Rellenamos y presionamos next, una vez logeados nos se mostrara un token, el cual debemos copiar y pegar en la consola de rstudio.\n\nee_Initialize()\n\nVerificar si todo esta correcto ejecutando la siguiente linea\n\nee$String('Autenticado correctametne desde EE')$getInfo()\n\nSi aparece un error con Cloud SKD este video podría ser de ayuda."
  },
  {
    "objectID": "descarga.html",
    "href": "descarga.html",
    "title": "Descarga de variables climaticas desde Google Earth Engine",
    "section": "",
    "text": "df &lt;- readxl::read_xlsx('datos/Datos.a.usar.xlsx')\ndf$Lat &lt;- df$Lat *-1 ## multiplicamos por -1\ndf$Long &lt;- df$Long *-1"
  },
  {
    "objectID": "Seleccion de variables.html",
    "href": "Seleccion de variables.html",
    "title": "Selección de Variables",
    "section": "",
    "text": "El proceso de selección de variables es una etapa fundamental en el ajuste de modelos estadísticos y aprendizaje automático\nAlgunas de las razones por las cuales es una etapa importante al momento de generar modelos son:\n\n\n\nPodría mejorar de la precisión del modelo: Al eliminar variables irrelevantes o ruido, el modelado puede centrarse en las relaciones más importantes en los datos.\nReducción de la complejidad del modelo: Demasiadas variables en un modelo puede llevar a un sobreajuste (overfitting), y a un modelo que no generaliza bien a nuevos datos. Ademas, siempre prima el principio de la “Parsimonia”, es decir que entre varias explicaciones posibles para un fenómeno, la más simple es la preferida.\nAhorro de recursos: Al eliminar variables innecesarias, se reducen los recursos computacionales y el tiempo necesario para entrenar y aplicar el modelo.\nInterpretabilidad: En muchos casos, tener un modelo con un conjunto más pequeño de variables facilita la interpretación de los resultados. Un modelo más sencillo y interpretable puede ser más útil en situaciones donde es importante comprender las relaciones entre los datos.\nEvitar multicolinealidad: La multicolinealidad es una situación en la que dos o más variables independientes están altamente correlacionadas entre sí. Esto puede afectar la estabilidad de los coeficientes estimados.\n\n\n\nExisten diferentes técnicas para la selección de variables, que van desde métodos estadísticos simples como la correlación y las pruebas de hipótesis, hasta métodos más avanzados como la eliminación recursiva de características, la selección basada en modelos y el uso de algoritmos de aprendizaje automático especializados. La elección de la técnica adecuada depende del problema específico y de los datos disponibles.\nEn este tutorial abordaremos el método de selección conocido como BORUTA.\nEste es un algoritmo de tipo wraper, el cual se basa en Random Forest, pero es capas de trabajar otros métodos de clasificación que pueda aplicar medidas de importancia a las variables. El funcionamiento de Boruta, se basa en crear, un numero determinado, de copias aleatorias de las variables originales a las cuales denomina VARIABLES SOMBRAS. El paso siguiente es ajustar un modelo de clasificación (RF) en la base extendida y aplica una medida de importancia a las variables, el valor por defecto es Precisión de disminución media. En cada interación que realiza el algoritmo verifica si una variable tiene mayor importancia que la mejor de las variables sombras y elimina a las que se consideran poco importantes, el algoritmo se detiene cuando todas las variables son clasificadas o cuando se alcanzo el limite de iteraciones.\n\n\nEjemplo\n::: justify Cargamos la base de datos y visualizamos las primeras observaciones\n\ndatos &lt;- read.table(\"datos/datos_climaticos_p90_s10_GRSV_.csv\", \n                    sep = ',',\n                    header = T) \n\nknitr::kable(head(datos))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrevalencia\nPrecipitacion_S1\nTemperatura_M1\ntotal.evaporation_S1\nPunto.rocio_M1\nHumedad.relativa_M1\nViento_M1\nPrecipitacion_S2\nTemperatura_M2\ntotal.evaporation_S2\nPunto.rocio_M2\nHumedad.relativa_M2\nViento_M2\nPrecipitacion_S3\nTemperatura_M3\ntotal.evaporation_S3\nPunto.rocio_M3\nHumedad.relativa_M3\nViento_M3\nPrecipitacion_S4\nTemperatura_M4\ntotal.evaporation_S4\nPunto.rocio_M4\nHumedad.relativa_M4\nViento_M4\nPrecipitacion_S5\nTemperatura_M5\ntotal.evaporation_S5\nPunto.rocio_M5\nHumedad.relativa_M5\nViento_M5\nPrecipitacion_S6\nTemperatura_M6\ntotal.evaporation_S6\nPunto.rocio_M6\nHumedad.relativa_M6\nViento_M6\nPrecipitacion_S7\nTemperatura_M7\ntotal.evaporation_S7\nPunto.rocio_M7\nHumedad.relativa_M7\nViento_M7\nPrecipitacion_S8\nTemperatura_M8\ntotal.evaporation_S8\nPunto.rocio_M8\nHumedad.relativa_M8\nViento_M8\nPrecipitacion_S9\nTemperatura_M9\ntotal.evaporation_S9\nPunto.rocio_M9\nHumedad.relativa_M9\nViento_M9\n\n\n\n\n0\n40.77222\n17.45261\n-28.33930\n9.692104\n62.15429\n9.550003\n29.980325\n19.93089\n-31.63386\n11.71084\n61.32050\n10.524583\n58.80454\n21.09550\n-32.32736\n15.04153\n69.09544\n8.809708\n23.29257\n21.42003\n-33.49918\n15.19537\n68.27445\n6.330567\n88.17117\n21.76422\n-35.73416\n16.52869\n73.12695\n7.969975\n52.494768\n23.36504\n-43.68412\n18.52080\n74.61011\n8.229237\n92.81232\n22.37040\n-36.16472\n19.28469\n82.79483\n7.755318\n18.23063\n20.89243\n-41.26019\n15.28985\n70.95540\n6.247756\n52.317150\n21.59422\n-38.12344\n17.75632\n79.01922\n6.195492\n\n\n1\n68.87928\n22.21168\n-34.85771\n13.552930\n59.38708\n8.605324\n33.409032\n23.39674\n-46.01118\n15.59267\n61.90249\n8.786134\n105.81008\n25.13240\n-37.97017\n17.10040\n62.07848\n7.148391\n66.66275\n23.69956\n-53.74022\n17.35323\n67.87999\n9.007605\n23.33514\n25.89740\n-42.30483\n20.68902\n73.29899\n9.311781\n22.903512\n23.95839\n-44.94247\n17.24439\n66.68926\n7.879813\n38.18165\n24.18183\n-34.06787\n18.48371\n71.34632\n8.529210\n28.15288\n24.37042\n-43.70957\n18.05203\n68.37512\n7.054054\n33.430283\n23.30904\n-33.86983\n16.84080\n67.40338\n8.405585\n\n\n1\n32.88226\n22.90680\n-55.97373\n16.394501\n67.12184\n9.923963\n51.990869\n24.88696\n-46.90543\n20.07332\n75.18925\n12.313163\n55.24235\n23.15055\n-52.55656\n17.29438\n70.07145\n9.384605\n47.69960\n23.47259\n-39.27835\n18.04173\n72.19442\n11.121590\n40.02072\n23.70042\n-48.24343\n18.38801\n72.67101\n7.743997\n44.921245\n22.24057\n-45.09612\n17.15622\n73.08625\n10.223504\n60.44557\n21.43376\n-44.04540\n16.66469\n74.65485\n8.600905\n113.99694\n21.06979\n-31.37510\n17.52932\n80.56131\n9.719525\n47.031531\n20.89440\n-35.61473\n15.89513\n73.45120\n8.976966\n\n\n0\n59.00061\n23.03397\n-37.06972\n17.480118\n71.36693\n10.310936\n17.394302\n23.50503\n-39.81845\n16.49345\n64.95955\n6.833130\n36.44005\n22.29799\n-34.33367\n15.89467\n67.46363\n10.118730\n15.59053\n22.93316\n-31.96396\n15.64583\n63.88858\n9.059976\n104.45580\n20.06789\n-26.35937\n15.81718\n77.38533\n9.934031\n7.425612\n20.47319\n-30.68857\n14.88668\n70.62686\n7.563868\n109.91102\n19.74131\n-20.26077\n16.61145\n83.29037\n7.665309\n30.97078\n18.44318\n-25.73639\n14.04938\n75.72398\n6.804633\n8.405828\n19.93086\n-21.57919\n15.60438\n76.60358\n10.966929\n\n\n0\n42.69838\n22.21428\n-38.75197\n18.131990\n77.89205\n7.197031\n17.611501\n22.97362\n-45.53494\n16.95012\n69.05174\n5.355237\n41.94524\n21.50274\n-38.09625\n16.13511\n71.86199\n7.302598\n17.32560\n21.68455\n-35.45596\n16.35954\n72.10431\n5.414933\n111.11747\n19.48740\n-28.17335\n16.14265\n81.82223\n9.144525\n10.686985\n19.92199\n-35.29183\n15.36930\n75.31846\n6.134435\n170.73777\n19.37277\n-20.29178\n17.25063\n88.12837\n7.805350\n37.71484\n18.18845\n-26.40050\n14.81658\n80.87738\n5.394562\n27.377852\n19.30374\n-22.75632\n15.98061\n81.49237\n8.093831\n\n\n1\n16.90851\n24.17102\n-41.18850\n15.902086\n60.75211\n8.961824\n2.173086\n27.90169\n-34.74050\n17.97909\n55.25449\n7.175913\n59.59703\n26.48267\n-36.05452\n16.36776\n54.55258\n9.855588\n20.11445\n23.43508\n-41.01980\n15.63606\n62.00784\n9.720164\n36.91224\n23.55350\n-41.58328\n18.59710\n74.35662\n8.334251\n18.865912\n22.87126\n-33.90063\n15.58116\n64.09028\n8.140485\n34.69129\n25.44124\n-28.43134\n19.21432\n68.88748\n7.527879\n36.46979\n22.53304\n-31.27795\n17.87197\n75.26432\n13.210880\n2.336532\n21.45272\n-22.35964\n14.38115\n64.28280\n8.634956\n\n\n\n\n\nEsta base de datos que contiene 105 observaciones y 54 variables climáticas.\nPara la selección de variables vamos a utilizar el paquete “Boruta”.\n\n#install.packages(\"Boruta\") \nlibrary(Boruta)\n\n# Establecemos una semilla de aleatoriedad para garantizar la reproducibilidad\n# de este script.\n\nset.seed(123)\n# Ahora empezamos la selección \nseleccion &lt;- Boruta(Prevalencia ~ ., # Establecemos nuestra variable Respuesta, \n                    data = datos, \n                    doTrace = 0,# Establece el nivel de siguimiento.\n                    maxRuns = 300)\n\nseleccion\n\n## Boruta performed 299 iterations in 6.660165 secs.\n##  3 attributes confirmed important: Precipitacion_S3, Punto.rocio_M3,\n## Viento_M3;\n##  48 attributes confirmed unimportant: Humedad.relativa_M1,\n## Humedad.relativa_M2, Humedad.relativa_M3, Humedad.relativa_M4,\n## Humedad.relativa_M5 and 43 more;\n##  3 tentative attributes left: Precipitacion_S9, Temperatura_M5,\n## Viento_M9;\n\n\nPodemos ver de forma gráfica los resultados:\n\nplot(seleccion,cex.axis=.5,las=2, xlab=\"\")\n\n\n\n\nVemos cual fue el valor de la media, mediana, mín. y máx. de importancia para cada variable y la decisión que tomo el algoritmo:\n\nnivel_importancia &lt;- as.data.frame(attStats(seleccion))\n#Ordenamos de mayor a menor segun la importancia media\nimportancia &lt;- nivel_importancia[with(nivel_importancia,\n                                  order(-nivel_importancia$meanImp)),] \nknitr::kable(importancia)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmeanImp\nmedianImp\nminImp\nmaxImp\nnormHits\ndecision\n\n\n\n\nViento_M3\n9.9359277\n9.9133834\n5.4126847\n14.6135994\n0.9899666\nConfirmed\n\n\nPunto.rocio_M3\n5.6766821\n5.8307891\n1.4007034\n9.4954387\n0.8461538\nConfirmed\n\n\nPrecipitacion_S3\n5.5596904\n5.5696647\n2.1830466\n10.1319893\n0.8561873\nConfirmed\n\n\nTemperatura_M5\n2.9487069\n2.9737020\n0.2299895\n6.6376700\n0.4916388\nTentative\n\n\nViento_M9\n2.9401663\n2.9912874\n-0.8907344\n6.2863941\n0.4949833\nTentative\n\n\nPrecipitacion_S9\n2.8092199\n2.7041020\n-1.6893120\n6.5624618\n0.4615385\nTentative\n\n\nViento_M1\n2.2836073\n2.1523770\n-0.3948097\n5.1954347\n0.1170569\nRejected\n\n\nPrecipitacion_S2\n1.7716842\n1.7409949\n0.1493046\n3.1158919\n0.0000000\nRejected\n\n\ntotal.evaporation_S9\n1.6250860\n1.8146348\n-0.1522477\n3.2639836\n0.0000000\nRejected\n\n\ntotal.evaporation_S3\n1.3856984\n1.2257532\n-0.5263806\n3.3592050\n0.0000000\nRejected\n\n\nViento_M5\n1.3417132\n1.6522259\n-0.6187553\n2.6480522\n0.0000000\nRejected\n\n\nPrecipitacion_S4\n1.1013012\n0.8889466\n-0.5619761\n2.7688195\n0.0066890\nRejected\n\n\nViento_M6\n1.0750943\n1.0152343\n-1.0256722\n3.1278235\n0.0033445\nRejected\n\n\nPrecipitacion_S6\n1.0372794\n1.1846240\n-0.9075394\n2.5397589\n0.0033445\nRejected\n\n\nHumedad.relativa_M3\n1.0253092\n1.0776747\n-1.5776863\n2.5356417\n0.0000000\nRejected\n\n\nPrecipitacion_S5\n0.7479622\n0.7276650\n-1.4336987\n2.7787364\n0.0033445\nRejected\n\n\nViento_M8\n0.6569962\n0.7418330\n-2.2999036\n2.3349338\n0.0033445\nRejected\n\n\nHumedad.relativa_M7\n0.5616683\n0.7381310\n-1.1013946\n1.9581971\n0.0000000\nRejected\n\n\ntotal.evaporation_S1\n0.5082433\n0.5174591\n-1.9819968\n2.0588470\n0.0000000\nRejected\n\n\nPunto.rocio_M5\n0.4418453\n0.6712501\n-1.2986256\n1.6280722\n0.0000000\nRejected\n\n\nTemperatura_M4\n0.4277280\n0.8865319\n-1.3020275\n2.1400037\n0.0000000\nRejected\n\n\nPunto.rocio_M4\n0.3405669\n0.2872060\n-1.5487543\n2.9218529\n0.0000000\nRejected\n\n\ntotal.evaporation_S6\n0.2684491\n0.1634972\n-0.8416687\n1.8327405\n0.0000000\nRejected\n\n\nHumedad.relativa_M9\n0.1999380\n0.2214043\n-1.7722148\n1.8199464\n0.0000000\nRejected\n\n\nHumedad.relativa_M4\n0.1598820\n0.1270614\n-0.9888263\n1.9497984\n0.0000000\nRejected\n\n\ntotal.evaporation_S2\n0.1485293\n0.1609597\n-2.4558398\n1.7971533\n0.0000000\nRejected\n\n\nHumedad.relativa_M2\n0.1259386\n0.1111432\n-2.4882412\n2.1860778\n0.0000000\nRejected\n\n\nPrecipitacion_S7\n0.0974881\n0.0190306\n-1.4458750\n1.9950264\n0.0000000\nRejected\n\n\nTemperatura_M3\n0.0810966\n0.0701099\n-1.3884807\n1.3608935\n0.0000000\nRejected\n\n\nViento_M4\n0.0639343\n-0.2417393\n-1.5658390\n1.5855882\n0.0000000\nRejected\n\n\nPunto.rocio_M7\n0.0626540\n0.2433068\n-1.4293667\n2.2033448\n0.0000000\nRejected\n\n\nPunto.rocio_M9\n0.0539338\n0.2726653\n-1.1417914\n1.1413357\n0.0000000\nRejected\n\n\nViento_M2\n0.0478931\n0.1467508\n-2.0721391\n2.0981547\n0.0000000\nRejected\n\n\nPunto.rocio_M2\n-0.0069893\n-0.1861609\n-1.1595216\n2.2328904\n0.0000000\nRejected\n\n\nTemperatura_M6\n-0.0098378\n0.0466771\n-1.8612126\n1.9696828\n0.0000000\nRejected\n\n\nPunto.rocio_M6\n-0.0112508\n-0.1281389\n-0.9618100\n1.3543148\n0.0000000\nRejected\n\n\nHumedad.relativa_M1\n-0.0207830\n-0.0237433\n-2.9023290\n1.6039154\n0.0000000\nRejected\n\n\nPunto.rocio_M1\n-0.0210939\n-0.0931651\n-1.8756183\n1.3632232\n0.0000000\nRejected\n\n\nTemperatura_M8\n-0.0295424\n0.1406310\n-1.3254488\n1.3498143\n0.0000000\nRejected\n\n\nTemperatura_M2\n-0.0822627\n-0.2023226\n-1.5261384\n1.7153512\n0.0000000\nRejected\n\n\nViento_M7\n-0.0878352\n0.0745793\n-1.3587456\n1.3048953\n0.0000000\nRejected\n\n\ntotal.evaporation_S8\n-0.1380484\n-0.2948981\n-1.3355909\n2.1531333\n0.0000000\nRejected\n\n\ntotal.evaporation_S7\n-0.1682640\n-0.6257973\n-1.5306550\n2.2985611\n0.0000000\nRejected\n\n\nHumedad.relativa_M5\n-0.2019079\n-0.1559387\n-1.5415768\n1.6300372\n0.0000000\nRejected\n\n\nPunto.rocio_M8\n-0.2245779\n-0.5199734\n-1.2493925\n1.3100015\n0.0000000\nRejected\n\n\nHumedad.relativa_M6\n-0.2276281\n0.3474875\n-2.5526648\n1.7710620\n0.0000000\nRejected\n\n\nTemperatura_M1\n-0.2330725\n-0.3123411\n-1.4382408\n1.3425027\n0.0000000\nRejected\n\n\nTemperatura_M7\n-0.3033924\n-0.0895091\n-1.8914130\n1.4535435\n0.0000000\nRejected\n\n\nHumedad.relativa_M8\n-0.3569304\n-0.0591126\n-2.2132638\n1.0821683\n0.0000000\nRejected\n\n\nPrecipitacion_S8\n-0.3655709\n-0.4698752\n-1.5766055\n1.4964937\n0.0000000\nRejected\n\n\ntotal.evaporation_S5\n-0.4837406\n-1.0628391\n-2.1297302\n1.6195166\n0.0000000\nRejected\n\n\nPrecipitacion_S1\n-0.9369013\n-0.9706843\n-2.7777618\n0.9128701\n0.0000000\nRejected\n\n\nTemperatura_M9\n-0.9553085\n-0.8185003\n-2.1743048\n0.5947996\n0.0000000\nRejected\n\n\ntotal.evaporation_S4\n-1.2340801\n-1.2734743\n-2.6430886\n0.6469818\n0.0000000\nRejected\n\n\n\n\n\nPodemos ver que el algoritmo selecciono tres variables como importantes, tres como tentativas y 22 como no importantes.\n\nvariables_selec &lt;- names(seleccion$finalDecision[seleccion$finalDecision %in%\n                                                   \"Confirmed\"])\n\nNos quedamos con las variables seleccionadas: Precipitacion_S3, Punto.rocio_M3, Viento_M3"
  },
  {
    "objectID": "Ajuste.html",
    "href": "Ajuste.html",
    "title": "Ajuste de modelo predictivo",
    "section": "",
    "text": "Vamos hacer dos modelos, un random forest y una regresion logistica, para ello vamos a usar las variables que fueron seleccionadas por el metodo BORUTA:\n\nViento_M3\nPunto.rocio_M3\nPrecipitacion_S3\n\nPrimero vamos a particionar la base de datos en set de entrenamiento y set de testeo para controlar la capacidad de clasificacion de nuestros modelos.\n\n# install.packages('caret')\n# install.packages('MLmetrics')\nlibrary(caret)\nlibrary(MLmetrics)\ndatos &lt;- read.table(\"datos/datos_climaticos_p90_s10_GRSV_.csv\", \n                    sep = ',',\n                    header = T) \n\ndatos$Prevalencia &lt;- factor(datos$Prevalencia,\n                            labels = c('N','P'))\n\nset.seed(123)\nentrenar &lt;- createDataPartition(datos$Prevalencia,\n                                p = 0.8, \n                                list = F)\n\nset_entrenamiento &lt;- datos[entrenar,]\nset_test &lt;- datos[-entrenar,]\n\nEl set de entrenamiento tiene 85 observaciones y el set de testeo tiene 20 observaciones.\n\nproporciones &lt;- data.frame(\"Set\" = c(\"Entrenamiento\",\"Validacion\"),\n           \"Positivos\" = c(sum(set_entrenamiento$Prevalencia == \"P\")/nrow(set_entrenamiento),\n                           sum(set_test$Prevalencia == \"P\")/nrow(set_test)),\n           \"Negativos\" = c(sum(set_entrenamiento$Prevalencia == \"N\")/nrow(set_entrenamiento),\n                           sum(set_test$Prevalencia == \"N\")/nrow(set_test)))\nknitr::kable(proporciones)\n\n\n\n\nSet\nPositivos\nNegativos\n\n\n\n\nEntrenamiento\n0.3882353\n0.6117647\n\n\nValidacion\n0.4000000\n0.6000000\n\n\n\n\n\nDefinimos el control del entrenamiento para los modelos:\n\ncontrol_entrenamiento &lt;- trainControl(method = \"repeatedcv\",\n                           number=5,\n                           repeats = 3,\n                           returnResamp = \"final\",\n                           summaryFunction = multiClassSummary,\n                           allowParallel = TRUE,\n                           classProbs = TRUE, \n                           p = .8)\n\n\n\nRandom Forest\n\nUtilizaremos la función train que permite seleccionar la métrica que queremos maximizar (o minimizar). En este maximizaremos la métrica AUC, ya que la usaremos para evaluar el rendimiento de nuestros clasificadores.\n\nset.seed(123)\nrfgrid &lt;- expand.grid(mtry = 2)\nrf &lt;- train(Prevalencia ~Viento_M3+Punto.rocio_M3+Precipitacion_S3,\n            data=set_entrenamiento,\n                  method=\"rf\",\n                  metric = \"AUC\",  \n                  tuneGrid = rfgrid,\n                  trControl = control_entrenamiento)\n\nEl área media bajo la curva ROC de este modelo fue: 0.5781385\nLa precisión media de este modelo fue: 0.5819989\nEl índice Kappa medio de este modelo fue: 0.1126048\nPodemos comparar la precisión media del modelo en el set de entrenamiento y en el set de testeo.\n\nTesteo &lt;- MLmetrics::Accuracy(predict(rf,set_test),set_test$Prevalencia)\nSensRF &lt;- MLmetrics::Sensitivity(set_test$Prevalencia,predict(rf,set_test), positive = \"P\")\nEspRF &lt;- MLmetrics::Specificity(set_test$Prevalencia,predict(rf,set_test), positive = \"P\")\nAUCRF &lt;- pROC::auc(as.numeric(set_test$Prevalencia),as.numeric(predict(rf,set_test)))\n\nLa precisión media del set de entrenamiento fue: 0.58, y la precisión en el set de testeo fue: 0.65\n\n\n\nRegresion Logistica\n\n\nset.seed(123)\n\nrlg &lt;- train(Prevalencia ~Viento_M3+Punto.rocio_M3+Precipitacion_S3,\n            data=set_entrenamiento,\n                  method=\"glm\",\n                  family = \"binomial\",\n                  metric = \"AUC\",  \n                  trControl = control_entrenamiento)\n\nEl área media bajo la curva ROC de este modelo fue: 0.6031746.\nLa precisión media de este modelo fue: 0.6601307.\nEl índice Kappa medio de este modelo fue: 0.2003776.\nDe nuevo comparamos la precisión media del modelo en el set de entrenamiento y en el set de testeo.\n\nTesteoRL &lt;- MLmetrics::Accuracy(predict(rlg,set_test),set_test$Prevalencia)\nSensRL &lt;- MLmetrics::Sensitivity(set_test$Prevalencia,predict(rlg,set_test), positive = \"P\")\nEspRL &lt;- MLmetrics::Specificity(set_test$Prevalencia,predict(rlg,set_test), positive = \"P\")\nAUCRL &lt;- pROC::auc(as.numeric(set_test$Prevalencia),as.numeric(predict(rlg,set_test)))\n\nLa precisión media del set de entrenamiento fue: 0.66, y la precisión en el set de testeo fue: 0.85\n\nComparamos ambos modelos ajustados.\n\ncomparacion &lt;- data.frame(\"Modelos\" = c(\"Random Forest\", \"Regresion Logistica\"), \n                          \"Precisión\" = c(Testeo, TesteoRL),\n                          \"Sensibilidad\" = c(SensRF,SensRL), \n                          \"Especificidad\" = c(EspRF,EspRL), \n                          \"AUC\" = c(AUCRF,AUCRL))\n\nknitr::kable(comparacion)\n\n\n\n\n\n\n\n\n\n\n\nModelos\nPrecisión\nSensibilidad\nEspecificidad\nAUC\n\n\n\n\nRandom Forest\n0.65\n0.625\n0.6666667\n0.6458333\n\n\nRegresion Logistica\n0.85\n0.750\n0.9166667\n0.8333333\n\n\n\n\n\n\n\nGraficamos las curvas ROC\n\ndatos_roc &lt;- data.frame(\"Prevalencia\" = as.numeric(set_test$Prevalencia), \n                        \"RF\" = as.numeric(predict(rf,set_test)),\n                        \"RL\" = as.numeric(predict(rlg,set_test)))\n\n\n\nroc.list &lt;- pROC::roc(Prevalencia ~ RF + RL, data = datos_roc)\n\npROC::ggroc(roc.list) +\n  scale_color_discrete(name = \"Modelo\")+\n  theme_minimal()+\n  geom_abline(slope = 1, intercept = 1, linetype = \"dashed\")"
  },
  {
    "objectID": "descarga.html#preprocesamiento",
    "href": "descarga.html#preprocesamiento",
    "title": "Descarga de variables climaticas desde Google Earth Engine",
    "section": "",
    "text": "df &lt;- readxl::read_xlsx('datos/Datos.a.usar.xlsx')\ndf$Lat &lt;- df$Lat *-1 ## multiplicamos por -1\ndf$Long &lt;- df$Long *-1"
  },
  {
    "objectID": "descarga.html#descarga-de-los-datos",
    "href": "descarga.html#descarga-de-los-datos",
    "title": "Descarga de variables climaticas desde Google Earth Engine",
    "section": "Descarga de los datos",
    "text": "Descarga de los datos\nLlamamos las funciones de descarga\n\nsource('src/cambio_de_unidades2.R') ## función que nos permite pasar de kelvins a Celsius\nsource('src/XClimVar2.R') # Contiene la función de descarga \n\nLa función de descarga necesita :\n\ndataframe con la columna geom, es decir haber transformado a un dataframe a un objeto sf.\nla columna tiempo, contiene las fechas estas pueden estar en string, no necesariamente en tipo Date.\npol, es el polígono generado con los puntos en los que se realizo el muestreo. poligono_ee.\nclimaticvar , recibe como entrada un vector con las variables a descargar estas pueden ser :\n\nc(‘pp_sum’,‘pp_mean’,‘t_mean’,‘t_sum’,‘te_mean’,‘te_sum’,‘dp’,‘wind’,‘hr’) mientras mayor sea el numero de variables mas tiempo tomara la extracción\nEstas tres variables reciben como entrada un valor lógico (TRUE o FALSE), esto indica como extraer los valores, si en días, meses o años.\n\nDaily(boolean)\nMonthly(boolean)\nYearly(boolean)\np_length: es el largo del periodo total para la descarga de variables(numérica)\nstep: es cada cuanto se toma las variables(numérica)\n\n\n\n\ndf_climatic &lt;- XClimVar(df_sf,\n                        df_sf$fechacorta,\n                        pol = poligono_ee,\n                        climaticvar = c( 'pp_sum','t_mean','te_sum','dp','wind','hr'),\n                        Daily = T,\n                        p_length=90,\n                        step=10)\nhead(df_climatic)\n\ndf_climatic &lt;- cbind(st_coordinates(df_climatic),\n                     st_drop_geometry(df_climatic))\n\nwrite.csv(df_climatic, \"datos/datos_climaticos_p90_s10_GRSV.csv\",\n          row.names = F,\n          sep = ',')"
  },
  {
    "objectID": "descarga.html#trabajamos-con-las-variables-temporales",
    "href": "descarga.html#trabajamos-con-las-variables-temporales",
    "title": "Descarga de variables climaticas desde Google Earth Engine",
    "section": "Trabajamos con las variables temporales",
    "text": "Trabajamos con las variables temporales\nConvertimos la columna con las fechas del periodo crítico y le restamos 30 días para ampliar la ventana de descarga de las variables climáticas\n\ndf$fechacorta &lt;- as.Date(df$fechacorta) - days(30)"
  },
  {
    "objectID": "descarga.html#trabajamos-con-las-variables-espaciales",
    "href": "descarga.html#trabajamos-con-las-variables-espaciales",
    "title": "Descarga de variables climaticas desde Google Earth Engine",
    "section": "Trabajamos con las variables espaciales",
    "text": "Trabajamos con las variables espaciales\nConvertimos el dataframe a un objeto espacial cuya estructura es similar al dataframe pero con una columna que hace referencia a las coordenadas espaciales.\n\n## vamos a utlizar la libreria sf\ndf_sf &lt;- st_as_sf(df,\n                  coords = c('Long','Lat'),\n                  crs=4326)\n\nChequeamos que los puntos pertenecen a los lugares que deberían\n\ntmap_mode('view')\ntm_shape(df_sf) +\n  tm_dots()\n\n\n\n\n\n\nGeneramos un polígono para delimitar el área de descarga de los datos\n\npoligono &lt;-  st_convex_hull(st_buffer(st_combine(df_sf),\n                                      units::as_units(4000,'m')))\ntm_shape(poligono) +\n  tm_polygons(alpha = 0)  +\n  tm_shape(df_sf) +\n  tm_dots()\n\n\n\n\n\n\nInicializamos GEE, transformamos el poligono sf a un objeto earth engine y estamos listos para comenzar la descarga!\n\nee_Initialize()\npoligono_ee &lt;- sf_as_ee(poligono)\n\n## Registered S3 method overwritten by 'geojsonsf':\n##   method        from   \n##   print.geojson geojson\n\n\n## -- rgee 1.1.7 --------------------------------------- earthengine-api 0.1.371 -- \n##  v user: not_defined \n##  v Initializing Google Earth Engine:\n v Initializing Google Earth Engine:  DONE!\n## \n v Earth Engine account: users/francosuarez \n## \n v Python Path: C:/Users/franm/.conda/envs/rgee/python.exe \n## --------------------------------------------------------------------------------"
  }
]